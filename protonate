#!/usr/bin/env python

import sys
import numpy as np


def distance(R1, R2):
    """
    Calculate the distance between R1 and R2
    """
    dR = (R1 - R2)**2
    return np.sqrt(np.sum(dR))


def write_coordinates(atoms, coordinates, title=""):
    """
    Print coordinates in XYZ format
    """

    N, D = np.shape(coordinates)

    print str(N)
    print title

    for atom, R in zip(atoms, coordinates):
        print "{:2s} {} {} {}".format(atom, R[0], R[1], R[2])

    return


def read_mol2(filename):
    """
    Read molecule file
    """

    f = open(filename,'r')

    atoms = []
    coordinates = []
    atoms_N = [] # indexes for the Nitrogen atoms

    # Get number of atoms
    for i in range(3):
        line = f.readline()

    words = line.split()
    n_atoms = int(words[0])

    # skip 4 lines
    for i in range(4):
        f.readline()

    # Read atom lines
    for i in xrange(n_atoms):

        line = f.readline()
        line = line.split()

        atom_id = line[0]
        atom_type = line[1]
        atom_x = float(line[2])
        atom_y = float(line[3])
        atom_z = float(line[4])
        atom_hyp = line[5]

        atoms.append(atom_type)
        coordinates.append(np.array([atom_x, atom_y, atom_z]))

        # check if atom is any of these hybridization
        check_hyp = ['N.3', 'N.2', 'N.ar']

        # if any(x in atom_hyp for x in check_hyp):
        if atom_hyp in check_hyp:
            atoms_N.append(i)

    return atoms, coordinates, atoms_N


def find_bonds(coordinates, atoms_N):
    """
    Find all covalent bonds to each Nitrogen
    """
    bonded_to_N = []

    # Iterate over found Nitrogens and note bond configuration
    for k, i in enumerate(atoms_N):

        bonded_to_N.append([])

        for j, coordinate in enumerate(coordinates):

            if j != i:
                r = distance(coordinate, coordinates[i])

                # check if bonded
                if r < 1.8:
                    bonded_to_N[k].append(j)

    return bonded_to_N


def protonate(filename):

    title = " "

    sign = -1 #change to +1 to invert

    atoms, coordinates, atoms_N = read_mol2(filename)
    bonded_to_N = find_bonds(coordinates, atoms_N)

    # TODO this should be every combination, and not only "protonate all"
    for i in xrange(len(atoms_N)):

        c_ave = np.zeros(3)

        n_bonded = len(bonded_to_N[i])

        if n_bonded > 3: continue #skip quaternary Ns

        for coord in bonded_to_N[i]:
            c_ave += coord

        c_ave /= n_bonded

        r = distance(c_ave, coordinates[atoms_N[i]])

        c_ave = coordinates[atoms_N[i]] + sign*(c_ave - coordinates[atoms_N[i]])/r

        coordinates.append(c_ave)
        atoms.append('H')

    write_coordinates(atoms, coordinates, title=title)


if __name__ == "__main__":

    filename = sys.argv[1]

    protonate(filename)

